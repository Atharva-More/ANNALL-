import numpy as np

def initialize_perceptron(input_size):
    return np.zeros(input_size), 0  # Weights and bias

def train_perceptron(training_data, labels, epochs=100, learning_rate=0.1):
    weights, bias = initialize_perceptron(len(training_data[0]))
    for _ in range(epochs):
        for inputs, label in zip(training_data, labels):
            prediction = (np.dot(inputs, weights) + bias > 0)
            update = learning_rate * (label - prediction)
            weights += update * inputs  # inputs is already a numpy array, so this operation is valid
            bias += update
    return weights, bias

def predict(inputs, weights, bias):
    return int(np.dot(inputs, weights) + bias > 0)

def ascii_to_binary(ascii_val):
    return np.array([int(b) for b in bin(ascii_val)[2:].zfill(8)], dtype=np.float64)

# Setup training data
training_data = [ascii_to_binary(i) for i in range(10)]
labels = [1 if i % 2 == 0 else 0 for i in range(10)]

# Train the perceptron
weights, bias = train_perceptron(training_data, labels)

# User input for testing
test_number = int(input("Enter a number between 0-9: "))
if 0 <= test_number < 10:
    test_input = ascii_to_binary(test_number)
    prediction = predict(test_input, weights, bias)
    print(f"The number {test_number} is {'even' if prediction else 'odd'}.")
else:
    print("Invalid input")